    C# გვაქვს Main მეთოდი , რომელიც არის საწყისი წერტილი კოდის დასაწერად და კონსოლში გამოსატანად.მასში დაწერილ თითოეული ხაზის შემასრულებელია Thread . მაგალითად თუ გვაქვს 
რაიმე მინიჭების ოპერაცია , ამ ოპერაციას აკეთებს thread.არსებობს single thread და multiple thread. C# ში როცა ვქმნით პროექტს მას ავტომატურად შემოყავს thread ოპერაციების 
შესასრულებლად . ამ შემოყვანილ thread ს ქვია SingleThread , რომელიც კოდის შესრულებას მიყვება ხაზიდან ხაზზე.ხოლო multiple thread ის 
საშუალებით შეგვიძლია რამოდენიმე ლოგიკა ერთად შევასრულოთ.ატვირთულ კოდში ჩანს რომ multiple thread კლასში იწყება 11-ე ხაზიდან . აქ ვხვდებით keyword Thread , რომლის საშუალებითაც
შემოგვყავს ახალი thread  და მას ვაწოდებს იმ ლოგიკას რაც გვინდა შეასრულოს.12-ე ხაზზე კი შემოგვყავს კიდევ ერთი ახალი thread , რომელსაც ანალოგიურად ვეუბნებით პირობას რისი 
შესრულებაც გვინდა . multiple thread ის საშუალებით შეგვიძლია გადაცემული ოპერაციები ერთდროულად , პარალელურად შეასრულოს და არა ერთი ლოგიკის დასრულებიდან მეორე ლოგიკაზე
გადასვლით , რომელსაც აკეთებს single thread.Thread ის გასაშვებად აუცილებლად ვიყენებთ ფუნქცია .start()-ს.
    Thread ში გვაქვს ორი ტიპი . ეს არის Foreground thread  და Background thread.
    Foreground Thread ის დროს პირველ რიგში მიყვება main thread ში დაწერილ ლოგიკას და შემდეგ 
გადადის დანარჩენ Thread ებზე , რომლებსაც უკვე პარალელურად , ერთროულად აკეთებს.ჩემს კოდში Foreground კლასში 11-ე ხაზიდან იწყება main thread , რომელსაც როგორც ზემოთ აღვნიშნე არ ჭირდება
ახალი keyword ის გამოძახება , რადგან main ში დაწერილი კოდს ავტომატურად Main Thread მოყვება.მისი დასრულების შემდეგ (ხაზი 15) იწყება უკვე multiple thread.აღსანიშნავია ის ფაქტი , რომ 
foreground thread ის დროს პარალელურად არ იწყებენ მუშაობას Main Thread და სხვა დანარჩენი thread ები , ჯერ მხოლოდ მუშაობას იწყებს Main Thread , და მისი დასრულების შემდეგ 
პარარელურად იწყებენ მუშაობას სხვა დანარჩენი thread ები.
    Background Thread ის დროს როდესაც Main Thread ასრულებს მოვალეობას ავტომატურად ასრულებს სხვა დანარჩენი Thread ებიც მოვალეობას.მაგალითად ჩემს კოდში Background კლასში გვაქვს
 მეთოდი (MyMethod)რომლიც კონსოლს აწვდის ინფორმაციას . როცა ვქმნით ამ მეთოდის thread ს ვეუბნებით რომ thread.isbackground = true , ეს ნიშნავს იმას რომ როდესაც main thread
 დაასრულებს მუშაობას , მას არ აინტერესებს mymethod thread ში დარჩა შესასრულებელი თუ არა რაიმე , იგი ავტომატურად ასრულებს მუშაობას.
